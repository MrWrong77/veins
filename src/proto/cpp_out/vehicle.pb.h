// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_vehicle_2eproto_metadata_getter(int index);
namespace pb {
class Neigbour;
struct NeigbourDefaultTypeInternal;
extern NeigbourDefaultTypeInternal _Neigbour_default_instance_;
class PV_GetNeigbours;
struct PV_GetNeigboursDefaultTypeInternal;
extern PV_GetNeigboursDefaultTypeInternal _PV_GetNeigbours_default_instance_;
class PV_GetVehicle;
struct PV_GetVehicleDefaultTypeInternal;
extern PV_GetVehicleDefaultTypeInternal _PV_GetVehicle_default_instance_;
class VP_GetNeigbours;
struct VP_GetNeigboursDefaultTypeInternal;
extern VP_GetNeigboursDefaultTypeInternal _VP_GetNeigbours_default_instance_;
class VP_GetVehicle;
struct VP_GetVehicleDefaultTypeInternal;
extern VP_GetVehicleDefaultTypeInternal _VP_GetVehicle_default_instance_;
class VehicleInfo;
struct VehicleInfoDefaultTypeInternal;
extern VehicleInfoDefaultTypeInternal _VehicleInfo_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Neigbour* Arena::CreateMaybeMessage<::pb::Neigbour>(Arena*);
template<> ::pb::PV_GetNeigbours* Arena::CreateMaybeMessage<::pb::PV_GetNeigbours>(Arena*);
template<> ::pb::PV_GetVehicle* Arena::CreateMaybeMessage<::pb::PV_GetVehicle>(Arena*);
template<> ::pb::VP_GetNeigbours* Arena::CreateMaybeMessage<::pb::VP_GetNeigbours>(Arena*);
template<> ::pb::VP_GetVehicle* Arena::CreateMaybeMessage<::pb::VP_GetVehicle>(Arena*);
template<> ::pb::VehicleInfo* Arena::CreateMaybeMessage<::pb::VehicleInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class PV_GetVehicle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PV_GetVehicle) */ {
 public:
  inline PV_GetVehicle() : PV_GetVehicle(nullptr) {}
  virtual ~PV_GetVehicle();
  explicit constexpr PV_GetVehicle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PV_GetVehicle(const PV_GetVehicle& from);
  PV_GetVehicle(PV_GetVehicle&& from) noexcept
    : PV_GetVehicle() {
    *this = ::std::move(from);
  }

  inline PV_GetVehicle& operator=(const PV_GetVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PV_GetVehicle& operator=(PV_GetVehicle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PV_GetVehicle& default_instance() {
    return *internal_default_instance();
  }
  static inline const PV_GetVehicle* internal_default_instance() {
    return reinterpret_cast<const PV_GetVehicle*>(
               &_PV_GetVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PV_GetVehicle& a, PV_GetVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(PV_GetVehicle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PV_GetVehicle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PV_GetVehicle* New() const final {
    return CreateMaybeMessage<PV_GetVehicle>(nullptr);
  }

  PV_GetVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PV_GetVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PV_GetVehicle& from);
  void MergeFrom(const PV_GetVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PV_GetVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PV_GetVehicle";
  }
  protected:
  explicit PV_GetVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vehicle_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pb.PV_GetVehicle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class VP_GetVehicle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.VP_GetVehicle) */ {
 public:
  inline VP_GetVehicle() : VP_GetVehicle(nullptr) {}
  virtual ~VP_GetVehicle();
  explicit constexpr VP_GetVehicle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VP_GetVehicle(const VP_GetVehicle& from);
  VP_GetVehicle(VP_GetVehicle&& from) noexcept
    : VP_GetVehicle() {
    *this = ::std::move(from);
  }

  inline VP_GetVehicle& operator=(const VP_GetVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline VP_GetVehicle& operator=(VP_GetVehicle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VP_GetVehicle& default_instance() {
    return *internal_default_instance();
  }
  static inline const VP_GetVehicle* internal_default_instance() {
    return reinterpret_cast<const VP_GetVehicle*>(
               &_VP_GetVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VP_GetVehicle& a, VP_GetVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(VP_GetVehicle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VP_GetVehicle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VP_GetVehicle* New() const final {
    return CreateMaybeMessage<VP_GetVehicle>(nullptr);
  }

  VP_GetVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VP_GetVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VP_GetVehicle& from);
  void MergeFrom(const VP_GetVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VP_GetVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.VP_GetVehicle";
  }
  protected:
  explicit VP_GetVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vehicle_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .pb.VehicleInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::pb::VehicleInfo& info() const;
  ::pb::VehicleInfo* release_info();
  ::pb::VehicleInfo* mutable_info();
  void set_allocated_info(::pb::VehicleInfo* info);
  private:
  const ::pb::VehicleInfo& _internal_info() const;
  ::pb::VehicleInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::pb::VehicleInfo* info);
  ::pb::VehicleInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:pb.VP_GetVehicle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::VehicleInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class PV_GetNeigbours PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PV_GetNeigbours) */ {
 public:
  inline PV_GetNeigbours() : PV_GetNeigbours(nullptr) {}
  virtual ~PV_GetNeigbours();
  explicit constexpr PV_GetNeigbours(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PV_GetNeigbours(const PV_GetNeigbours& from);
  PV_GetNeigbours(PV_GetNeigbours&& from) noexcept
    : PV_GetNeigbours() {
    *this = ::std::move(from);
  }

  inline PV_GetNeigbours& operator=(const PV_GetNeigbours& from) {
    CopyFrom(from);
    return *this;
  }
  inline PV_GetNeigbours& operator=(PV_GetNeigbours&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PV_GetNeigbours& default_instance() {
    return *internal_default_instance();
  }
  static inline const PV_GetNeigbours* internal_default_instance() {
    return reinterpret_cast<const PV_GetNeigbours*>(
               &_PV_GetNeigbours_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PV_GetNeigbours& a, PV_GetNeigbours& b) {
    a.Swap(&b);
  }
  inline void Swap(PV_GetNeigbours* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PV_GetNeigbours* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PV_GetNeigbours* New() const final {
    return CreateMaybeMessage<PV_GetNeigbours>(nullptr);
  }

  PV_GetNeigbours* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PV_GetNeigbours>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PV_GetNeigbours& from);
  void MergeFrom(const PV_GetNeigbours& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PV_GetNeigbours* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PV_GetNeigbours";
  }
  protected:
  explicit PV_GetNeigbours(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vehicle_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pb.PV_GetNeigbours)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class VP_GetNeigbours PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.VP_GetNeigbours) */ {
 public:
  inline VP_GetNeigbours() : VP_GetNeigbours(nullptr) {}
  virtual ~VP_GetNeigbours();
  explicit constexpr VP_GetNeigbours(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VP_GetNeigbours(const VP_GetNeigbours& from);
  VP_GetNeigbours(VP_GetNeigbours&& from) noexcept
    : VP_GetNeigbours() {
    *this = ::std::move(from);
  }

  inline VP_GetNeigbours& operator=(const VP_GetNeigbours& from) {
    CopyFrom(from);
    return *this;
  }
  inline VP_GetNeigbours& operator=(VP_GetNeigbours&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VP_GetNeigbours& default_instance() {
    return *internal_default_instance();
  }
  static inline const VP_GetNeigbours* internal_default_instance() {
    return reinterpret_cast<const VP_GetNeigbours*>(
               &_VP_GetNeigbours_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VP_GetNeigbours& a, VP_GetNeigbours& b) {
    a.Swap(&b);
  }
  inline void Swap(VP_GetNeigbours* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VP_GetNeigbours* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VP_GetNeigbours* New() const final {
    return CreateMaybeMessage<VP_GetNeigbours>(nullptr);
  }

  VP_GetNeigbours* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VP_GetNeigbours>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VP_GetNeigbours& from);
  void MergeFrom(const VP_GetNeigbours& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VP_GetNeigbours* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.VP_GetNeigbours";
  }
  protected:
  explicit VP_GetNeigbours(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vehicle_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeigboursFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .pb.Neigbour neigbours = 2;
  int neigbours_size() const;
  private:
  int _internal_neigbours_size() const;
  public:
  void clear_neigbours();
  ::pb::Neigbour* mutable_neigbours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Neigbour >*
      mutable_neigbours();
  private:
  const ::pb::Neigbour& _internal_neigbours(int index) const;
  ::pb::Neigbour* _internal_add_neigbours();
  public:
  const ::pb::Neigbour& neigbours(int index) const;
  ::pb::Neigbour* add_neigbours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Neigbour >&
      neigbours() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:pb.VP_GetNeigbours)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Neigbour > neigbours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class Neigbour PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Neigbour) */ {
 public:
  inline Neigbour() : Neigbour(nullptr) {}
  virtual ~Neigbour();
  explicit constexpr Neigbour(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Neigbour(const Neigbour& from);
  Neigbour(Neigbour&& from) noexcept
    : Neigbour() {
    *this = ::std::move(from);
  }

  inline Neigbour& operator=(const Neigbour& from) {
    CopyFrom(from);
    return *this;
  }
  inline Neigbour& operator=(Neigbour&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Neigbour& default_instance() {
    return *internal_default_instance();
  }
  static inline const Neigbour* internal_default_instance() {
    return reinterpret_cast<const Neigbour*>(
               &_Neigbour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Neigbour& a, Neigbour& b) {
    a.Swap(&b);
  }
  inline void Swap(Neigbour* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Neigbour* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Neigbour* New() const final {
    return CreateMaybeMessage<Neigbour>(nullptr);
  }

  Neigbour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Neigbour>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Neigbour& from);
  void MergeFrom(const Neigbour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neigbour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Neigbour";
  }
  protected:
  explicit Neigbour(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vehicle_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kIsForwardFieldNumber = 2,
    kIsSameDirectionFieldNumber = 3,
  };
  // .pb.VehicleInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::pb::VehicleInfo& info() const;
  ::pb::VehicleInfo* release_info();
  ::pb::VehicleInfo* mutable_info();
  void set_allocated_info(::pb::VehicleInfo* info);
  private:
  const ::pb::VehicleInfo& _internal_info() const;
  ::pb::VehicleInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::pb::VehicleInfo* info);
  ::pb::VehicleInfo* unsafe_arena_release_info();

  // bool is_forward = 2;
  void clear_is_forward();
  bool is_forward() const;
  void set_is_forward(bool value);
  private:
  bool _internal_is_forward() const;
  void _internal_set_is_forward(bool value);
  public:

  // bool is_same_direction = 3;
  void clear_is_same_direction();
  bool is_same_direction() const;
  void set_is_same_direction(bool value);
  private:
  bool _internal_is_same_direction() const;
  void _internal_set_is_same_direction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Neigbour)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::VehicleInfo* info_;
  bool is_forward_;
  bool is_same_direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class VehicleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.VehicleInfo) */ {
 public:
  inline VehicleInfo() : VehicleInfo(nullptr) {}
  virtual ~VehicleInfo();
  explicit constexpr VehicleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleInfo(const VehicleInfo& from);
  VehicleInfo(VehicleInfo&& from) noexcept
    : VehicleInfo() {
    *this = ::std::move(from);
  }

  inline VehicleInfo& operator=(const VehicleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleInfo& operator=(VehicleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleInfo* internal_default_instance() {
    return reinterpret_cast<const VehicleInfo*>(
               &_VehicleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VehicleInfo& a, VehicleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleInfo* New() const final {
    return CreateMaybeMessage<VehicleInfo>(nullptr);
  }

  VehicleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleInfo& from);
  void MergeFrom(const VehicleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.VehicleInfo";
  }
  protected:
  explicit VehicleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vehicle_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kSpeedXFieldNumber = 5,
    kSpeedYFieldNumber = 6,
    kSpeedZFieldNumber = 7,
    kHeadingFieldNumber = 8,
    kIdFieldNumber = 1,
  };
  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double speed_x = 5;
  void clear_speed_x();
  double speed_x() const;
  void set_speed_x(double value);
  private:
  double _internal_speed_x() const;
  void _internal_set_speed_x(double value);
  public:

  // double speed_y = 6;
  void clear_speed_y();
  double speed_y() const;
  void set_speed_y(double value);
  private:
  double _internal_speed_y() const;
  void _internal_set_speed_y(double value);
  public:

  // double speed_z = 7;
  void clear_speed_z();
  double speed_z() const;
  void set_speed_z(double value);
  private:
  double _internal_speed_z() const;
  void _internal_set_speed_z(double value);
  public:

  // double heading = 8;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.VehicleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double speed_x_;
  double speed_y_;
  double speed_z_;
  double heading_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PV_GetVehicle

// string id = 1;
inline void PV_GetVehicle::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& PV_GetVehicle::id() const {
  // @@protoc_insertion_point(field_get:pb.PV_GetVehicle.id)
  return _internal_id();
}
inline void PV_GetVehicle::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.PV_GetVehicle.id)
}
inline std::string* PV_GetVehicle::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pb.PV_GetVehicle.id)
  return _internal_mutable_id();
}
inline const std::string& PV_GetVehicle::_internal_id() const {
  return id_.Get();
}
inline void PV_GetVehicle::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PV_GetVehicle::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.PV_GetVehicle.id)
}
inline void PV_GetVehicle::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.PV_GetVehicle.id)
}
inline void PV_GetVehicle::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.PV_GetVehicle.id)
}
inline std::string* PV_GetVehicle::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PV_GetVehicle::release_id() {
  // @@protoc_insertion_point(field_release:pb.PV_GetVehicle.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PV_GetVehicle::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.PV_GetVehicle.id)
}

// -------------------------------------------------------------------

// VP_GetVehicle

// .pb.VehicleInfo info = 1;
inline bool VP_GetVehicle::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool VP_GetVehicle::has_info() const {
  return _internal_has_info();
}
inline void VP_GetVehicle::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::pb::VehicleInfo& VP_GetVehicle::_internal_info() const {
  const ::pb::VehicleInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::VehicleInfo&>(
      ::pb::_VehicleInfo_default_instance_);
}
inline const ::pb::VehicleInfo& VP_GetVehicle::info() const {
  // @@protoc_insertion_point(field_get:pb.VP_GetVehicle.info)
  return _internal_info();
}
inline void VP_GetVehicle::unsafe_arena_set_allocated_info(
    ::pb::VehicleInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.VP_GetVehicle.info)
}
inline ::pb::VehicleInfo* VP_GetVehicle::release_info() {
  
  ::pb::VehicleInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::VehicleInfo* VP_GetVehicle::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:pb.VP_GetVehicle.info)
  
  ::pb::VehicleInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::pb::VehicleInfo* VP_GetVehicle::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::VehicleInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::pb::VehicleInfo* VP_GetVehicle::mutable_info() {
  // @@protoc_insertion_point(field_mutable:pb.VP_GetVehicle.info)
  return _internal_mutable_info();
}
inline void VP_GetVehicle::set_allocated_info(::pb::VehicleInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:pb.VP_GetVehicle.info)
}

// -------------------------------------------------------------------

// PV_GetNeigbours

// string id = 1;
inline void PV_GetNeigbours::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& PV_GetNeigbours::id() const {
  // @@protoc_insertion_point(field_get:pb.PV_GetNeigbours.id)
  return _internal_id();
}
inline void PV_GetNeigbours::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.PV_GetNeigbours.id)
}
inline std::string* PV_GetNeigbours::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pb.PV_GetNeigbours.id)
  return _internal_mutable_id();
}
inline const std::string& PV_GetNeigbours::_internal_id() const {
  return id_.Get();
}
inline void PV_GetNeigbours::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PV_GetNeigbours::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.PV_GetNeigbours.id)
}
inline void PV_GetNeigbours::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.PV_GetNeigbours.id)
}
inline void PV_GetNeigbours::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.PV_GetNeigbours.id)
}
inline std::string* PV_GetNeigbours::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PV_GetNeigbours::release_id() {
  // @@protoc_insertion_point(field_release:pb.PV_GetNeigbours.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PV_GetNeigbours::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.PV_GetNeigbours.id)
}

// -------------------------------------------------------------------

// VP_GetNeigbours

// string id = 1;
inline void VP_GetNeigbours::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& VP_GetNeigbours::id() const {
  // @@protoc_insertion_point(field_get:pb.VP_GetNeigbours.id)
  return _internal_id();
}
inline void VP_GetNeigbours::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.VP_GetNeigbours.id)
}
inline std::string* VP_GetNeigbours::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pb.VP_GetNeigbours.id)
  return _internal_mutable_id();
}
inline const std::string& VP_GetNeigbours::_internal_id() const {
  return id_.Get();
}
inline void VP_GetNeigbours::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VP_GetNeigbours::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.VP_GetNeigbours.id)
}
inline void VP_GetNeigbours::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.VP_GetNeigbours.id)
}
inline void VP_GetNeigbours::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.VP_GetNeigbours.id)
}
inline std::string* VP_GetNeigbours::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VP_GetNeigbours::release_id() {
  // @@protoc_insertion_point(field_release:pb.VP_GetNeigbours.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VP_GetNeigbours::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.VP_GetNeigbours.id)
}

// repeated .pb.Neigbour neigbours = 2;
inline int VP_GetNeigbours::_internal_neigbours_size() const {
  return neigbours_.size();
}
inline int VP_GetNeigbours::neigbours_size() const {
  return _internal_neigbours_size();
}
inline void VP_GetNeigbours::clear_neigbours() {
  neigbours_.Clear();
}
inline ::pb::Neigbour* VP_GetNeigbours::mutable_neigbours(int index) {
  // @@protoc_insertion_point(field_mutable:pb.VP_GetNeigbours.neigbours)
  return neigbours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Neigbour >*
VP_GetNeigbours::mutable_neigbours() {
  // @@protoc_insertion_point(field_mutable_list:pb.VP_GetNeigbours.neigbours)
  return &neigbours_;
}
inline const ::pb::Neigbour& VP_GetNeigbours::_internal_neigbours(int index) const {
  return neigbours_.Get(index);
}
inline const ::pb::Neigbour& VP_GetNeigbours::neigbours(int index) const {
  // @@protoc_insertion_point(field_get:pb.VP_GetNeigbours.neigbours)
  return _internal_neigbours(index);
}
inline ::pb::Neigbour* VP_GetNeigbours::_internal_add_neigbours() {
  return neigbours_.Add();
}
inline ::pb::Neigbour* VP_GetNeigbours::add_neigbours() {
  // @@protoc_insertion_point(field_add:pb.VP_GetNeigbours.neigbours)
  return _internal_add_neigbours();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Neigbour >&
VP_GetNeigbours::neigbours() const {
  // @@protoc_insertion_point(field_list:pb.VP_GetNeigbours.neigbours)
  return neigbours_;
}

// -------------------------------------------------------------------

// Neigbour

// .pb.VehicleInfo info = 1;
inline bool Neigbour::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool Neigbour::has_info() const {
  return _internal_has_info();
}
inline void Neigbour::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::pb::VehicleInfo& Neigbour::_internal_info() const {
  const ::pb::VehicleInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::VehicleInfo&>(
      ::pb::_VehicleInfo_default_instance_);
}
inline const ::pb::VehicleInfo& Neigbour::info() const {
  // @@protoc_insertion_point(field_get:pb.Neigbour.info)
  return _internal_info();
}
inline void Neigbour::unsafe_arena_set_allocated_info(
    ::pb::VehicleInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Neigbour.info)
}
inline ::pb::VehicleInfo* Neigbour::release_info() {
  
  ::pb::VehicleInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::VehicleInfo* Neigbour::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:pb.Neigbour.info)
  
  ::pb::VehicleInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::pb::VehicleInfo* Neigbour::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::VehicleInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::pb::VehicleInfo* Neigbour::mutable_info() {
  // @@protoc_insertion_point(field_mutable:pb.Neigbour.info)
  return _internal_mutable_info();
}
inline void Neigbour::set_allocated_info(::pb::VehicleInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:pb.Neigbour.info)
}

// bool is_forward = 2;
inline void Neigbour::clear_is_forward() {
  is_forward_ = false;
}
inline bool Neigbour::_internal_is_forward() const {
  return is_forward_;
}
inline bool Neigbour::is_forward() const {
  // @@protoc_insertion_point(field_get:pb.Neigbour.is_forward)
  return _internal_is_forward();
}
inline void Neigbour::_internal_set_is_forward(bool value) {
  
  is_forward_ = value;
}
inline void Neigbour::set_is_forward(bool value) {
  _internal_set_is_forward(value);
  // @@protoc_insertion_point(field_set:pb.Neigbour.is_forward)
}

// bool is_same_direction = 3;
inline void Neigbour::clear_is_same_direction() {
  is_same_direction_ = false;
}
inline bool Neigbour::_internal_is_same_direction() const {
  return is_same_direction_;
}
inline bool Neigbour::is_same_direction() const {
  // @@protoc_insertion_point(field_get:pb.Neigbour.is_same_direction)
  return _internal_is_same_direction();
}
inline void Neigbour::_internal_set_is_same_direction(bool value) {
  
  is_same_direction_ = value;
}
inline void Neigbour::set_is_same_direction(bool value) {
  _internal_set_is_same_direction(value);
  // @@protoc_insertion_point(field_set:pb.Neigbour.is_same_direction)
}

// -------------------------------------------------------------------

// VehicleInfo

// int32 id = 1;
inline void VehicleInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.VehicleInfo.id)
  return _internal_id();
}
inline void VehicleInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void VehicleInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.VehicleInfo.id)
}

// double x = 2;
inline void VehicleInfo::clear_x() {
  x_ = 0;
}
inline double VehicleInfo::_internal_x() const {
  return x_;
}
inline double VehicleInfo::x() const {
  // @@protoc_insertion_point(field_get:pb.VehicleInfo.x)
  return _internal_x();
}
inline void VehicleInfo::_internal_set_x(double value) {
  
  x_ = value;
}
inline void VehicleInfo::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:pb.VehicleInfo.x)
}

// double y = 3;
inline void VehicleInfo::clear_y() {
  y_ = 0;
}
inline double VehicleInfo::_internal_y() const {
  return y_;
}
inline double VehicleInfo::y() const {
  // @@protoc_insertion_point(field_get:pb.VehicleInfo.y)
  return _internal_y();
}
inline void VehicleInfo::_internal_set_y(double value) {
  
  y_ = value;
}
inline void VehicleInfo::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:pb.VehicleInfo.y)
}

// double z = 4;
inline void VehicleInfo::clear_z() {
  z_ = 0;
}
inline double VehicleInfo::_internal_z() const {
  return z_;
}
inline double VehicleInfo::z() const {
  // @@protoc_insertion_point(field_get:pb.VehicleInfo.z)
  return _internal_z();
}
inline void VehicleInfo::_internal_set_z(double value) {
  
  z_ = value;
}
inline void VehicleInfo::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:pb.VehicleInfo.z)
}

// double speed_x = 5;
inline void VehicleInfo::clear_speed_x() {
  speed_x_ = 0;
}
inline double VehicleInfo::_internal_speed_x() const {
  return speed_x_;
}
inline double VehicleInfo::speed_x() const {
  // @@protoc_insertion_point(field_get:pb.VehicleInfo.speed_x)
  return _internal_speed_x();
}
inline void VehicleInfo::_internal_set_speed_x(double value) {
  
  speed_x_ = value;
}
inline void VehicleInfo::set_speed_x(double value) {
  _internal_set_speed_x(value);
  // @@protoc_insertion_point(field_set:pb.VehicleInfo.speed_x)
}

// double speed_y = 6;
inline void VehicleInfo::clear_speed_y() {
  speed_y_ = 0;
}
inline double VehicleInfo::_internal_speed_y() const {
  return speed_y_;
}
inline double VehicleInfo::speed_y() const {
  // @@protoc_insertion_point(field_get:pb.VehicleInfo.speed_y)
  return _internal_speed_y();
}
inline void VehicleInfo::_internal_set_speed_y(double value) {
  
  speed_y_ = value;
}
inline void VehicleInfo::set_speed_y(double value) {
  _internal_set_speed_y(value);
  // @@protoc_insertion_point(field_set:pb.VehicleInfo.speed_y)
}

// double speed_z = 7;
inline void VehicleInfo::clear_speed_z() {
  speed_z_ = 0;
}
inline double VehicleInfo::_internal_speed_z() const {
  return speed_z_;
}
inline double VehicleInfo::speed_z() const {
  // @@protoc_insertion_point(field_get:pb.VehicleInfo.speed_z)
  return _internal_speed_z();
}
inline void VehicleInfo::_internal_set_speed_z(double value) {
  
  speed_z_ = value;
}
inline void VehicleInfo::set_speed_z(double value) {
  _internal_set_speed_z(value);
  // @@protoc_insertion_point(field_set:pb.VehicleInfo.speed_z)
}

// double heading = 8;
inline void VehicleInfo::clear_heading() {
  heading_ = 0;
}
inline double VehicleInfo::_internal_heading() const {
  return heading_;
}
inline double VehicleInfo::heading() const {
  // @@protoc_insertion_point(field_get:pb.VehicleInfo.heading)
  return _internal_heading();
}
inline void VehicleInfo::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void VehicleInfo::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:pb.VehicleInfo.heading)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
