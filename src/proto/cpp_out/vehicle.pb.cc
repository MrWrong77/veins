// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#include "vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
constexpr PV_GetVehicle::PV_GetVehicle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PV_GetVehicleDefaultTypeInternal {
  constexpr PV_GetVehicleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PV_GetVehicleDefaultTypeInternal() {}
  union {
    PV_GetVehicle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PV_GetVehicleDefaultTypeInternal _PV_GetVehicle_default_instance_;
constexpr VP_GetVehicle::VP_GetVehicle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct VP_GetVehicleDefaultTypeInternal {
  constexpr VP_GetVehicleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VP_GetVehicleDefaultTypeInternal() {}
  union {
    VP_GetVehicle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VP_GetVehicleDefaultTypeInternal _VP_GetVehicle_default_instance_;
constexpr PV_GetNeigbours::PV_GetNeigbours(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PV_GetNeigboursDefaultTypeInternal {
  constexpr PV_GetNeigboursDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PV_GetNeigboursDefaultTypeInternal() {}
  union {
    PV_GetNeigbours _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PV_GetNeigboursDefaultTypeInternal _PV_GetNeigbours_default_instance_;
constexpr VP_GetNeigbours::VP_GetNeigbours(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : neigbours_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VP_GetNeigboursDefaultTypeInternal {
  constexpr VP_GetNeigboursDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VP_GetNeigboursDefaultTypeInternal() {}
  union {
    VP_GetNeigbours _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VP_GetNeigboursDefaultTypeInternal _VP_GetNeigbours_default_instance_;
constexpr Neigbour::Neigbour(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr)
  , is_forward_(false)
  , is_same_direction_(false){}
struct NeigbourDefaultTypeInternal {
  constexpr NeigbourDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NeigbourDefaultTypeInternal() {}
  union {
    Neigbour _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NeigbourDefaultTypeInternal _Neigbour_default_instance_;
constexpr VehicleInfo::VehicleInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , speed_x_(0)
  , speed_y_(0)
  , speed_z_(0)
  , heading_(0)
  , id_(0){}
struct VehicleInfoDefaultTypeInternal {
  constexpr VehicleInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleInfoDefaultTypeInternal() {}
  union {
    VehicleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleInfoDefaultTypeInternal _VehicleInfo_default_instance_;
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vehicle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PV_GetVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PV_GetVehicle, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::VP_GetVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::VP_GetVehicle, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PV_GetNeigbours, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PV_GetNeigbours, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::VP_GetNeigbours, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::VP_GetNeigbours, id_),
  PROTOBUF_FIELD_OFFSET(::pb::VP_GetNeigbours, neigbours_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Neigbour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Neigbour, info_),
  PROTOBUF_FIELD_OFFSET(::pb::Neigbour, is_forward_),
  PROTOBUF_FIELD_OFFSET(::pb::Neigbour, is_same_direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::VehicleInfo, id_),
  PROTOBUF_FIELD_OFFSET(::pb::VehicleInfo, x_),
  PROTOBUF_FIELD_OFFSET(::pb::VehicleInfo, y_),
  PROTOBUF_FIELD_OFFSET(::pb::VehicleInfo, z_),
  PROTOBUF_FIELD_OFFSET(::pb::VehicleInfo, speed_x_),
  PROTOBUF_FIELD_OFFSET(::pb::VehicleInfo, speed_y_),
  PROTOBUF_FIELD_OFFSET(::pb::VehicleInfo, speed_z_),
  PROTOBUF_FIELD_OFFSET(::pb::VehicleInfo, heading_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::PV_GetVehicle)},
  { 6, -1, sizeof(::pb::VP_GetVehicle)},
  { 12, -1, sizeof(::pb::PV_GetNeigbours)},
  { 18, -1, sizeof(::pb::VP_GetNeigbours)},
  { 25, -1, sizeof(::pb::Neigbour)},
  { 33, -1, sizeof(::pb::VehicleInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PV_GetVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_VP_GetVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PV_GetNeigbours_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_VP_GetNeigbours_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Neigbour_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_VehicleInfo_default_instance_),
};

const char descriptor_table_protodef_vehicle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rvehicle.proto\022\002pb\"\033\n\rPV_GetVehicle\022\n\n\002"
  "id\030\001 \001(\t\".\n\rVP_GetVehicle\022\035\n\004info\030\001 \001(\0132"
  "\017.pb.VehicleInfo\"\035\n\017PV_GetNeigbours\022\n\n\002i"
  "d\030\001 \001(\t\">\n\017VP_GetNeigbours\022\n\n\002id\030\001 \001(\t\022\037"
  "\n\tneigbours\030\002 \003(\0132\014.pb.Neigbour\"X\n\010Neigb"
  "our\022\035\n\004info\030\001 \001(\0132\017.pb.VehicleInfo\022\022\n\nis"
  "_forward\030\002 \001(\010\022\031\n\021is_same_direction\030\003 \001("
  "\010\"~\n\013VehicleInfo\022\n\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001(\001\022"
  "\t\n\001y\030\003 \001(\001\022\t\n\001z\030\004 \001(\001\022\017\n\007speed_x\030\005 \001(\001\022\017"
  "\n\007speed_y\030\006 \001(\001\022\017\n\007speed_z\030\007 \001(\001\022\017\n\007head"
  "ing\030\010 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_2eproto = {
  false, false, 417, descriptor_table_protodef_vehicle_2eproto, "vehicle.proto", 
  &descriptor_table_vehicle_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_vehicle_2eproto::offsets,
  file_level_metadata_vehicle_2eproto, file_level_enum_descriptors_vehicle_2eproto, file_level_service_descriptors_vehicle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_vehicle_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_2eproto);
  return descriptor_table_vehicle_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vehicle_2eproto(&descriptor_table_vehicle_2eproto);
namespace pb {

// ===================================================================

class PV_GetVehicle::_Internal {
 public:
};

PV_GetVehicle::PV_GetVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.PV_GetVehicle)
}
PV_GetVehicle::PV_GetVehicle(const PV_GetVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.PV_GetVehicle)
}

void PV_GetVehicle::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PV_GetVehicle::~PV_GetVehicle() {
  // @@protoc_insertion_point(destructor:pb.PV_GetVehicle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PV_GetVehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PV_GetVehicle::ArenaDtor(void* object) {
  PV_GetVehicle* _this = reinterpret_cast< PV_GetVehicle* >(object);
  (void)_this;
}
void PV_GetVehicle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PV_GetVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PV_GetVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PV_GetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PV_GetVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PV_GetVehicle.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PV_GetVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PV_GetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PV_GetVehicle.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PV_GetVehicle)
  return target;
}

size_t PV_GetVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PV_GetVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PV_GetVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PV_GetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const PV_GetVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PV_GetVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PV_GetVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PV_GetVehicle)
    MergeFrom(*source);
  }
}

void PV_GetVehicle::MergeFrom(const PV_GetVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PV_GetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void PV_GetVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PV_GetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PV_GetVehicle::CopyFrom(const PV_GetVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PV_GetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PV_GetVehicle::IsInitialized() const {
  return true;
}

void PV_GetVehicle::InternalSwap(PV_GetVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PV_GetVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VP_GetVehicle::_Internal {
 public:
  static const ::pb::VehicleInfo& info(const VP_GetVehicle* msg);
};

const ::pb::VehicleInfo&
VP_GetVehicle::_Internal::info(const VP_GetVehicle* msg) {
  return *msg->info_;
}
VP_GetVehicle::VP_GetVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.VP_GetVehicle)
}
VP_GetVehicle::VP_GetVehicle(const VP_GetVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::pb::VehicleInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.VP_GetVehicle)
}

void VP_GetVehicle::SharedCtor() {
info_ = nullptr;
}

VP_GetVehicle::~VP_GetVehicle() {
  // @@protoc_insertion_point(destructor:pb.VP_GetVehicle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VP_GetVehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void VP_GetVehicle::ArenaDtor(void* object) {
  VP_GetVehicle* _this = reinterpret_cast< VP_GetVehicle* >(object);
  (void)_this;
}
void VP_GetVehicle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VP_GetVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VP_GetVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.VP_GetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VP_GetVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.VehicleInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VP_GetVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.VP_GetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.VehicleInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.VP_GetVehicle)
  return target;
}

size_t VP_GetVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.VP_GetVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.VehicleInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VP_GetVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.VP_GetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const VP_GetVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VP_GetVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.VP_GetVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.VP_GetVehicle)
    MergeFrom(*source);
  }
}

void VP_GetVehicle::MergeFrom(const VP_GetVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.VP_GetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::pb::VehicleInfo::MergeFrom(from._internal_info());
  }
}

void VP_GetVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.VP_GetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VP_GetVehicle::CopyFrom(const VP_GetVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.VP_GetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VP_GetVehicle::IsInitialized() const {
  return true;
}

void VP_GetVehicle::InternalSwap(VP_GetVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VP_GetVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PV_GetNeigbours::_Internal {
 public:
};

PV_GetNeigbours::PV_GetNeigbours(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.PV_GetNeigbours)
}
PV_GetNeigbours::PV_GetNeigbours(const PV_GetNeigbours& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.PV_GetNeigbours)
}

void PV_GetNeigbours::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PV_GetNeigbours::~PV_GetNeigbours() {
  // @@protoc_insertion_point(destructor:pb.PV_GetNeigbours)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PV_GetNeigbours::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PV_GetNeigbours::ArenaDtor(void* object) {
  PV_GetNeigbours* _this = reinterpret_cast< PV_GetNeigbours* >(object);
  (void)_this;
}
void PV_GetNeigbours::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PV_GetNeigbours::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PV_GetNeigbours::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PV_GetNeigbours)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PV_GetNeigbours::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PV_GetNeigbours.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PV_GetNeigbours::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PV_GetNeigbours)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PV_GetNeigbours.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PV_GetNeigbours)
  return target;
}

size_t PV_GetNeigbours::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PV_GetNeigbours)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PV_GetNeigbours::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PV_GetNeigbours)
  GOOGLE_DCHECK_NE(&from, this);
  const PV_GetNeigbours* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PV_GetNeigbours>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PV_GetNeigbours)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PV_GetNeigbours)
    MergeFrom(*source);
  }
}

void PV_GetNeigbours::MergeFrom(const PV_GetNeigbours& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PV_GetNeigbours)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void PV_GetNeigbours::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PV_GetNeigbours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PV_GetNeigbours::CopyFrom(const PV_GetNeigbours& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PV_GetNeigbours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PV_GetNeigbours::IsInitialized() const {
  return true;
}

void PV_GetNeigbours::InternalSwap(PV_GetNeigbours* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PV_GetNeigbours::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VP_GetNeigbours::_Internal {
 public:
};

VP_GetNeigbours::VP_GetNeigbours(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  neigbours_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.VP_GetNeigbours)
}
VP_GetNeigbours::VP_GetNeigbours(const VP_GetNeigbours& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      neigbours_(from.neigbours_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.VP_GetNeigbours)
}

void VP_GetNeigbours::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VP_GetNeigbours::~VP_GetNeigbours() {
  // @@protoc_insertion_point(destructor:pb.VP_GetNeigbours)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VP_GetNeigbours::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VP_GetNeigbours::ArenaDtor(void* object) {
  VP_GetNeigbours* _this = reinterpret_cast< VP_GetNeigbours* >(object);
  (void)_this;
}
void VP_GetNeigbours::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VP_GetNeigbours::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VP_GetNeigbours::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.VP_GetNeigbours)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neigbours_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VP_GetNeigbours::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.VP_GetNeigbours.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.Neigbour neigbours = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neigbours(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VP_GetNeigbours::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.VP_GetNeigbours)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.VP_GetNeigbours.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .pb.Neigbour neigbours = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_neigbours_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_neigbours(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.VP_GetNeigbours)
  return target;
}

size_t VP_GetNeigbours::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.VP_GetNeigbours)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Neigbour neigbours = 2;
  total_size += 1UL * this->_internal_neigbours_size();
  for (const auto& msg : this->neigbours_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VP_GetNeigbours::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.VP_GetNeigbours)
  GOOGLE_DCHECK_NE(&from, this);
  const VP_GetNeigbours* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VP_GetNeigbours>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.VP_GetNeigbours)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.VP_GetNeigbours)
    MergeFrom(*source);
  }
}

void VP_GetNeigbours::MergeFrom(const VP_GetNeigbours& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.VP_GetNeigbours)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neigbours_.MergeFrom(from.neigbours_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void VP_GetNeigbours::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.VP_GetNeigbours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VP_GetNeigbours::CopyFrom(const VP_GetNeigbours& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.VP_GetNeigbours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VP_GetNeigbours::IsInitialized() const {
  return true;
}

void VP_GetNeigbours::InternalSwap(VP_GetNeigbours* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  neigbours_.InternalSwap(&other->neigbours_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VP_GetNeigbours::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Neigbour::_Internal {
 public:
  static const ::pb::VehicleInfo& info(const Neigbour* msg);
};

const ::pb::VehicleInfo&
Neigbour::_Internal::info(const Neigbour* msg) {
  return *msg->info_;
}
Neigbour::Neigbour(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Neigbour)
}
Neigbour::Neigbour(const Neigbour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::pb::VehicleInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&is_forward_, &from.is_forward_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_same_direction_) -
    reinterpret_cast<char*>(&is_forward_)) + sizeof(is_same_direction_));
  // @@protoc_insertion_point(copy_constructor:pb.Neigbour)
}

void Neigbour::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_same_direction_) -
    reinterpret_cast<char*>(&info_)) + sizeof(is_same_direction_));
}

Neigbour::~Neigbour() {
  // @@protoc_insertion_point(destructor:pb.Neigbour)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Neigbour::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void Neigbour::ArenaDtor(void* object) {
  Neigbour* _this = reinterpret_cast< Neigbour* >(object);
  (void)_this;
}
void Neigbour::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Neigbour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Neigbour::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Neigbour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&is_forward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_same_direction_) -
      reinterpret_cast<char*>(&is_forward_)) + sizeof(is_same_direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Neigbour::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.VehicleInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_same_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_same_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Neigbour::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Neigbour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.VehicleInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // bool is_forward = 2;
  if (this->is_forward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_forward(), target);
  }

  // bool is_same_direction = 3;
  if (this->is_same_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_same_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Neigbour)
  return target;
}

size_t Neigbour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Neigbour)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.VehicleInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // bool is_forward = 2;
  if (this->is_forward() != 0) {
    total_size += 1 + 1;
  }

  // bool is_same_direction = 3;
  if (this->is_same_direction() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Neigbour::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Neigbour)
  GOOGLE_DCHECK_NE(&from, this);
  const Neigbour* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Neigbour>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Neigbour)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Neigbour)
    MergeFrom(*source);
  }
}

void Neigbour::MergeFrom(const Neigbour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Neigbour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::pb::VehicleInfo::MergeFrom(from._internal_info());
  }
  if (from.is_forward() != 0) {
    _internal_set_is_forward(from._internal_is_forward());
  }
  if (from.is_same_direction() != 0) {
    _internal_set_is_same_direction(from._internal_is_same_direction());
  }
}

void Neigbour::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Neigbour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neigbour::CopyFrom(const Neigbour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Neigbour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neigbour::IsInitialized() const {
  return true;
}

void Neigbour::InternalSwap(Neigbour* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Neigbour, is_same_direction_)
      + sizeof(Neigbour::is_same_direction_)
      - PROTOBUF_FIELD_OFFSET(Neigbour, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Neigbour::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VehicleInfo::_Internal {
 public:
};

VehicleInfo::VehicleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:pb.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(id_));
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:pb.VehicleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleInfo::ArenaDtor(void* object) {
  VehicleInfo* _this = reinterpret_cast< VehicleInfo* >(object);
  (void)_this;
}
void VehicleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speed_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          speed_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speed_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          speed_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speed_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          speed_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  // double speed_x = 5;
  if (!(this->speed_x() <= 0 && this->speed_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed_x(), target);
  }

  // double speed_y = 6;
  if (!(this->speed_y() <= 0 && this->speed_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_y(), target);
  }

  // double speed_z = 7;
  if (!(this->speed_z() <= 0 && this->speed_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_speed_z(), target);
  }

  // double heading = 8;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.VehicleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double speed_x = 5;
  if (!(this->speed_x() <= 0 && this->speed_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double speed_y = 6;
  if (!(this->speed_y() <= 0 && this->speed_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double speed_z = 7;
  if (!(this->speed_z() <= 0 && this->speed_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading = 8;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.VehicleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.speed_x() <= 0 && from.speed_x() >= 0)) {
    _internal_set_speed_x(from._internal_speed_x());
  }
  if (!(from.speed_y() <= 0 && from.speed_y() >= 0)) {
    _internal_set_speed_y(from._internal_speed_y());
  }
  if (!(from.speed_z() <= 0 && from.speed_z() >= 0)) {
    _internal_set_speed_z(from._internal_speed_z());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void VehicleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleInfo, id_)
      + sizeof(VehicleInfo::id_)
      - PROTOBUF_FIELD_OFFSET(VehicleInfo, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::PV_GetVehicle* Arena::CreateMaybeMessage< ::pb::PV_GetVehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PV_GetVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::VP_GetVehicle* Arena::CreateMaybeMessage< ::pb::VP_GetVehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::VP_GetVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PV_GetNeigbours* Arena::CreateMaybeMessage< ::pb::PV_GetNeigbours >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PV_GetNeigbours >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::VP_GetNeigbours* Arena::CreateMaybeMessage< ::pb::VP_GetNeigbours >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::VP_GetNeigbours >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Neigbour* Arena::CreateMaybeMessage< ::pb::Neigbour >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Neigbour >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::VehicleInfo* Arena::CreateMaybeMessage< ::pb::VehicleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::VehicleInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
